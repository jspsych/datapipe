import { customAlphabet } from "nanoid";
import { doc, getDoc, writeBatch, arrayUnion } from "firebase/firestore";
import { db, auth } from "./firebase";

export async function getUserOsfToken(user) {
  const userdoc = await getDoc(doc(db, `users/${user.uid}`));
  let osfToken = null;

  if (userdoc.exists()) {
    const data = userdoc.data();
    if (data.usingPersonalToken) {
      osfToken = data.osfToken;
    } else {
      if (data.authTokenExpires > Date.now()) {
        osfToken = data.authToken;
      } else {
        // Token refresh
        const regenResult = await fetch(process.env.NEXT_PUBLIC_OAUTH_REGEN, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            uid: user.uid,
          })
        });

        const regenData = await regenResult.json();
        osfToken = regenData.access_token;
      }
    }
  }

  return osfToken;
}

export async function createOsfChildComponent(osfToken, osfRepo, osfComponentName, region = 'us') {
  // Clean OSF repo URL if needed
  if (osfRepo.includes("https://osf.io/")) {
    osfRepo = osfRepo.replace("https://osf.io/", "");
  }

  const osfResult = await fetch(
    `https://api.osf.io/v2/nodes/${osfRepo}/children/?region=${region}`,
    {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${osfToken}`,
      },
      body: JSON.stringify({
        data: {
          type: "nodes",
          attributes: {
            title: osfComponentName,
            category: "data",
            description:
              "This node was automatically generated by DataPipe (https://pipe.jspsych.org/)",
          },
        },
      }),
    }
  );

  const nodeData = await osfResult.json();

  if (nodeData.errors) {
    throw new Error(nodeData.errors);
  }

  const filesLink = nodeData.data.relationships.files.links.related.href;

  const filesResult = await fetch(filesLink, {
    method: "GET",
    headers: {
      "Content-Type": "application/json",
      Authorization: `Bearer ${osfToken}`,
    },
  });

  const filesData = await filesResult.json();
  const uploadLink = filesData.data[0].links.upload;

  return {
    componentId: nodeData.data.id,
    uploadLink: uploadLink,
    osfRepo: osfRepo
  };
}

export async function createExperimentDocument(experimentData) {
  const {
    id,
    title,
    osfRepo,
    osfComponent,
    osfFilesLink,
    owner,
    nConditions = 1,
    useValidation = true,
    allowJSON = true,
    allowCSV = true,
    limitSessions = false,
    maxSessions = 1
  } = experimentData;

  const batch = writeBatch(db);

  const experimentDoc = doc(db, "experiments", id);
  batch.set(experimentDoc, {
    title: title,
    osfRepo: osfRepo,
    osfComponent: osfComponent,
    osfFilesLink: osfFilesLink,
    active: false,
    activeBase64: false,
    activeConditionAssignment: false,
    sessions: 0,
    limitSessions: limitSessions,
    maxSessions: maxSessions,
    id: id,
    owner: owner,
    nConditions: nConditions,
    currentCondition: 0,
    useValidation: useValidation,
    allowJSON: allowJSON,
    allowCSV: allowCSV,
    requiredFields: ["trial_type"],
  });

  const userDoc = doc(db, `users/${owner}`);
  batch.update(userDoc, {
    experiments: arrayUnion(id),
  });

  await batch.commit();

  return id;
}

export async function createExperiment(params) {
  const {
    title,
    osfRepo,
    osfComponentName,
    region = 'us',
    uid,
    nConditions = 1,
    useValidation = true,
    allowJSON = true,
    allowCSV = true,
    useSessionLimit = false,
    maxSessions = 1
  } = params;

  // Generate experiment ID
  const nanoid = customAlphabet(
    "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz",
    12
  );
  const id = nanoid();

  // Get current user
  const user = auth.currentUser;
  if (!user) {
    throw new Error('User not authenticated');
  }

  // Get OSF token
  const osfToken = await getUserOsfToken(user);
  if (!osfToken) {
    throw new Error('No valid OSF token found');
  }

  // Create OSF child component
  const osfData = await createOsfChildComponent(osfToken, osfRepo, osfComponentName, region);

  // Create experiment document
  const experimentId = await createExperimentDocument({
    id: id,
    title: title,
    osfRepo: osfData.osfRepo,
    osfComponent: osfData.componentId,
    osfFilesLink: osfData.uploadLink,
    owner: uid,
    nConditions: nConditions,
    useValidation: useValidation,
    allowJSON: allowJSON,
    allowCSV: allowCSV,
    limitSessions: useSessionLimit,
    maxSessions: maxSessions
  });

  return {
    experimentId: experimentId,
    title: title,
    osfComponent: osfData.componentId,
    osfProject: osfData.osfRepo
  };
}